#!/bin/sh
#
# A hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.

CHECKPATCH=util/checkpatch_ayla

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

#
# Return zero if file or directory is in ".style_ok" files or not a .[chsS] file
#
style_ok() {
	file="$1"

	#
	# check extension
	#
	case $(basename "$file") in
	*.[chsS])
		;;
	*)
		return 0
	esac

	#
	# check for exception listed in .style_ok
	#
	if (
		dir=$(dirname "$file")
		cd $dir
		entry=$(basename "$file")
		while :
		do
			if [ -f .style_ok ]
			then
				if grep -q "^$entry$" .style_ok
				then
					return 0
				fi
			fi
			if [ -d .git ]
			then
				return 1
			fi
			entry=$(basename "$dir")
			dir=$(dirname "$dir")
			cd ..
		done
	)
	then
		return 0
	fi
	return 1
}

#
# Main loop
# check each changed file for style errors
#
rc=0
for file in `git diff --name-only --cached $against`
do
	# If there are whitespace errors, print the offending lines and fail
	# no exceptions: to override use: git commit --no-verify
	git diff-index --check --cached $against -- || rc=1

	# check for coding style
	style_ok $file ||
	    $CHECKPATCH --strict --terse --no-summary -f $file || rc=1
done
if [ $rc != 0 ]
then
	(
		echo
		echo "Please fix style issues before committing."
		echo "Externally-written files or directories to "
		echo "be skipped can be named in .style_ok files."
		echo
	) >&2
fi >&2
exit $rc
